package pers.jc.sql;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;

public abstract class Transaction {
	private Connection connection;
	private ArrayList<PreparedStatement> preparedStatements = new ArrayList<>();
	private ArrayList<ResultSet> resultSets = new ArrayList<>();
	
	public void start() {
		try {
			connection = Access.getConnection();
			connection.setAutoCommit(false);
			run();
			connection.commit();
		} catch (Exception e) {
			try {
				connection.rollback();
			} catch (Exception e1) {
				e1.printStackTrace();
			}
			e.printStackTrace();
		} finally {
			for (ResultSet resultSet : resultSets) {
				if (resultSet != null) {
					try {
						resultSet.close();
					} catch (Exception e) {
						e.printStackTrace();
					}
				}
			}
			for (PreparedStatement preparedStatement : preparedStatements) {
				if (preparedStatement != null) {
					try {
						preparedStatement.close();
					} catch (Exception e) {
						e.printStackTrace();
					}
				}
			}
			if (connection != null) {
				try {
					connection.setAutoCommit(true);
				} catch (Exception e) {
					Access.closeConnection(connection);
					connection = null;
					e.printStackTrace();
				} finally {
					Access.pool.add(connection);
				}
			}
		}
	}
	
	public abstract void run() throws Exception;
	
	public int insert(String sql) throws Exception {
		PreparedStatement preparedStatement = getPreparedStatement(sql, Statement.NO_GENERATED_KEYS);
		return preparedStatement.executeUpdate();
	}
	
	public int insertAndReturnKey(String sql) throws Exception {
		PreparedStatement preparedStatement = getPreparedStatement(sql, Statement.RETURN_GENERATED_KEYS);
		return excuteUpdateAndReturnKeys(preparedStatement)[0];
	}
	
	public int[] insertAndReturnKeys(String sql) throws Exception {
		PreparedStatement preparedStatement = getPreparedStatement(sql, Statement.RETURN_GENERATED_KEYS);
		return excuteUpdateAndReturnKeys(preparedStatement);
	}
	
	public int update(String sql) throws Exception {
		PreparedStatement preparedStatement = getPreparedStatement(sql, Statement.NO_GENERATED_KEYS);
		return preparedStatement.executeUpdate();
	}
	
	public int delete(String sql) throws Exception {
		PreparedStatement preparedStatement = getPreparedStatement(sql, Statement.NO_GENERATED_KEYS);
		return preparedStatement.executeUpdate();
	}
	
	private int[] excuteUpdateAndReturnKeys(PreparedStatement preparedStatement) throws Exception {
		int count = preparedStatement.executeUpdate();
		int[] keys = new int[0];
		if (count > 0) {
			ArrayList<Integer> keyList = new ArrayList<>();
			ResultSet resultSet = preparedStatement.getGeneratedKeys();
			resultSets.add(resultSet);
			while (resultSet.next()) {
				keyList.add(resultSet.getInt(1));
			}
			keys = new int[keyList.size()];
			for (int i = 0; i < keyList.size(); i++) {
				keys[i] = keyList.get(i);
			}
		}
		return keys;
	}
	
	private PreparedStatement getPreparedStatement(String sql, int autoGeneratedKeys) throws Exception {
		PreparedStatement preparedStatement = connection.prepareStatement(sql, autoGeneratedKeys);
		preparedStatements.add(preparedStatement);
		return preparedStatement;
	}
}
